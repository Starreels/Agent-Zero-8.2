Hello and welcome to the first public demonstration of Agent 0. My name is Jan and the developer behind this project. And in this video I will do a quick cut through the framework and all of its features for you. Agent 0 is an Argentiq AI framework that doesn't need to be pre-configured. You don't have to create your agents and tasks and tools beforehand. This framework can do it on the fly. As an example I can tell you, get time in a very long Seattle. The agent doesn't have any specific tool for the job, but he can use the code execution tool to write his own Python code and execute it in a safe Docker container. So he is using the time zone library, which is not installed. That is why he gets the error. So he installs the library, writes the code again, and he needs to print these two variables to be able to see them in the terminal, which he does now. He gets the answer in the terminal and he is going to report the answer back to him. So as you can see, the agent doesn't need a specific tool for anything he needs to do. He can write his own Python, JavaScript, or Linux terminal and execute it. I can now tell him, save it in a file using Node.js. And the agent will write a JavaScript code in Node.js and save it into his Word directory as a time and for.txt. Now let's try something else. Let's make him a download specific YouTube video about Rags. This will require some search. That's why the agent has a built-in knowledge tool. So this is a combination of online search and offline memory search. But now he should have some information about YouTube videos about Rags. There is a link to some of these YouTube videos. So he should now find a library to download the video and proceed. Okay, he is using YouTube DL in Python, which is not installed. So he installs that package. And he gets some errors. Right now I can stop my agent in the middle of his message and I can intervene. If I see he's editing the wrong direction, I can tell him use YT DLP.

 Because I know this library is going to work. So he installs YT DLP.

 And he is able to download the video about Rags. But now let's say I just want the audio of that video. So make him MP3 using SFMPH.

 So he checks the version of a FMDAG, which is not installed. So he proceeds with installing that library. The library is installed. And now the conversion happens. And I already have. And let's see a simple workflow. The audio file here. Now the agent is also capable of answering interactive terminal programs. If I make him install my Mac Commander without the Wi-flag, there will be a dialogue in the installation process. So he will now send the Y key to the terminal, confirming the dialogue and proceeding with the installation. And because there is a full debut Linux running in the container, the agent has access to all of the system features. So we can show you the system mode in real time, for example. And there is also a built-in memory into the agent. So you can instruct your agent to store or load memories from the database. And he can also do it automatically with the knowledge too. The agent is also capable of spawning other agents and cooperating with them. So if I tell him queit 5 flowers in his VG, use different agent for each, he is going to be able to delegate his sub-task to other agents starting with agent one. Then discarding him and spawning another instance of agent one. If agent one wants to delegate his task further, he will spawn agent two and agent two will spawn agent three, etc. So this way the agent zero can keep his context window much cleaner by delegating parts of his task to his subordinate agents and offloading some of that work into their context window. Okay so this has been the current state of development of the agent zero framework. As you can see, this framework is very different to all of the other AI frameworks. It has been built to be more of a personal assistant rather than predefined AI agentic framework. It is compatible with basically any of the shelf model right now. The tool system has been built specifically for this project. The Jason Parser has been built for this project. It is very forgiving. It can do even incomplete or invalid Jason outputs. So if some of these smaller models have problem generating a proper Jason, this framework will handle them as well. Also it is a fully python project. So you can download this code from the GitHub repository. The link will be in the description and you can just install the requirements in this file and get going. The execution is done in the Docker container. You only need to have Docker desktop installed and the rest will happen automatically. The image and the container will be spawned automatically by the python code in here. And also this framework is highly customizable. You can see the prompts folder. There are various prompts that the framework uses. There is the main system prompt. There are descriptions and examples for all the tools the agent can use. These are the built in tools like response to the user execute code search memory and search online, etc. There are no more specific tools. The rest can be built by the agent himself. There are also all of these small messages being sent to the agent in the process. So you can edit them all and customize the framework to your liking. You can change the behavior of the framework dramatically just by editing the system prompt. If you want to change the communication tool calling with the delegation to suborder agent, you can do it all here in the prompt. You don't need to touch the code. If you need to touch the code, everything is in the python directory. There are these tools that can be edited. You can add your old custom tools and they will start to record thematically. You just have to create a python file with the execute function and tell the agent about the file here in the agent tools file and the tool will start working right away. Also because the framework runs on your PC and only the execution of the code written by the agent executes in the Docker container, you can use VS code to debug the framework and to see everything inside here. I have also included a configuration for Visual Studio code. There is a configuration for the debugger, for example. So you can start running and debugging this code in Visual Studio right away. This project is still in beta. There is a lot of work to be done. At the time of recording this video, there is a version 0.3 on GitHub. But you can download this version and test it right away. It should be more or less stable. You can even help me by improving the system prompt. That would be much appreciated and stay tuned for more updates. Thank you.